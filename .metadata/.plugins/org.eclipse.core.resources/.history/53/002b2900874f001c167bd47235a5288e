package com.xadmin.usermanagement.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.xadmin.usermanagement.bean.User;

public class UserDao {
	
	private String jdbcURL = "jdbc:mysql://localhost:3306/userdb_?allowPublicKeyRetrieval=true&useSSL=false";
	private String jdbcUsername = "root";
	private String jdbcPassword = "Ruzna_421455";
	private String jdbcDriver = "com.mysql.cj.jdbc.Driver";
	
	//the following are the CRUD queries stored inside variables
	
		private static final String INSERT_USERS_SQL = "INSERT INTO users" + " (name, email, country) VALUES " + " (?, ?, ?);";
		private static final String SELECT_USER_BY_ID = "select id,name,email,country from users where id =?";
		private static final String SELECT_ALL_USERS = "select * from users";
		private static final String DELETE_USERS_SQL = "delete from users where id = ?;";
		private static final String UPDATE_USERS_SQL = "update users set name = ?,email= ?, country =? where id = ?;";
		

		//generating constructor
		public UserDao() {

		}
		
		//writing a method to get the connection of jdbc and inside it loading the driver also,
		//the method will return the connection
		// simply said inside this method: 
		//1. loading the connection 
		//2. getting the connection 
		//3. returning connection
		public Connection getConnection() {
			Connection connection = null;
			try {
				//loading the driver, jdbc driver is a variable assigned above
				Class.forName(jdbcDriver);
				//getting the connection using the driver manager class
				connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return connection;
		}
		
		
		//next method to write is the CRUD operations methods
		
		//insert user method
		//inserting the user by passing the object of the user
		public void insertUser(User user) throws SQLException {
			//show in the console
			System.out.println(INSERT_USERS_SQL);
			// try-with-resource statement will auto close the connection.
			// calling the getconnection method to get the connection of the jdbc and assigning it to the connection object
			try (Connection connection = getConnection();
				//with the help of the connection object, we are creating the preparestatement inside that we have passed the insert query
				PreparedStatement preparedStatement = connection.prepareStatement(INSERT_USERS_SQL)) {
				//after that we are calling the set string method to set the name, email, and country
				preparedStatement.setString(1, user.getName());
				preparedStatement.setString(2, user.getEmail());
				preparedStatement.setString(3, user.getCountry());
				System.out.println(preparedStatement);
				//finally we are calling the executeupdate method to run the query with the database to insert data
				preparedStatement.executeUpdate();
			} catch (SQLException e) {
				//we are calling a print sqlexception method to handle all the exceptions below we are writing the method
				printSQLException(e);
			}
		}
		
		
		//select user by id method
		public User selectUser(int id) {
			//creating a user object and assigning it null
			User user = null;
			// Step 1: Establishing a Connection
			try (Connection connection = getConnection();
				// Step 2:Create a statement using connection object
				PreparedStatement preparedStatement = connection.prepareStatement(SELECT_USER_BY_ID);) {
				//setting the prepared method, the number '1' below is the index number of the above query (first question mark)
				preparedStatement.setInt(1, id);
				System.out.println(preparedStatement);
				// Step 3: Execute the query or update query
				//below the reason we are using executequery method instead of execute update method is because its going to return a result
				//storing the output of the method in the Resultset (we should import this)
				ResultSet rs = preparedStatement.executeQuery();

				// Step 4: Process the ResultSet object.
				while (rs.next()) {
					//store the results into a variable
					String name = rs.getString("name");
					String email = rs.getString("email");
					String country = rs.getString("country");
					//passing it to the constructor, and passing it to the UserBean class
					user = new User(id, name, email, country);
				}
			} catch (SQLException e) {
				printSQLException(e);
			}
			return user;
		}
		
		
		//select all users method
		//storing all the users in the list and returning that list (Import list) (return type is the list)
		public List<User> selectAllUsers() {

			// using try-with-resources to avoid closing resources (boiler plate code)
			//users will be stored in the array list
			List<User> users = new ArrayList<>();
			// Step 1: Establishing a Connection
			try (Connection connection = getConnection();

					// Step 2:Create a statement using connection object
				PreparedStatement preparedStatement = connection.prepareStatement(SELECT_ALL_USERS);) {
				System.out.println(preparedStatement);
				// Step 3: Execute the query or update query
				ResultSet rs = preparedStatement.executeQuery();

				// Step 4: Process the ResultSet object.
				while (rs.next()) {
					int id = rs.getInt("id");
					String name = rs.getString("name");
					String email = rs.getString("email");
					String country = rs.getString("country");
					//creating the User object again and again and storing it in the user"s" array list
					users.add(new User(id, name, email, country));
				}
			} catch (SQLException e) {
				printSQLException(e);
			}
			//returning the user"s" array list
			return users;
		}
		
		//update user method
		//boolean to check whether the update method is executed or not
		//updating the user by passing the object of the user
		public boolean updateUser(User user) throws SQLException {
			//rowUpdated variable of a boolean type 
			boolean rowUpdated;
			try (Connection connection = getConnection();
					PreparedStatement statement = connection.prepareStatement(UPDATE_USERS_SQL);) {
				System.out.println("updated USer:"+statement);
				//Calling the set string to set the name, email, and country
				statement.setString(1, user.getName());
				statement.setString(2, user.getEmail());
				statement.setString(3, user.getCountry());
				statement.setInt(4, user.getId());
				
				
				//calling the executeUpdate method, here is where boolean comes
				//if its greater than 0 then only carry out the executeUpdate method
				//if its greater than 0 then rowUpdated will be true
				rowUpdated = statement.executeUpdate() > 0;
			}
			return rowUpdated;
		}
		
		
		//delete user method
		//deleting user according to the id
		public boolean deleteUser(int id) throws SQLException {
			//rowDeleted variable of a boolean type 
			boolean rowDeleted;
			try (Connection connection = getConnection();
				PreparedStatement statement = connection.prepareStatement(DELETE_USERS_SQL);) {
				//setting the id
				statement.setInt(1, id);
				//calling the executeUpdate query
				//if its greater than 0 then rowDeleted will be true
				rowDeleted = statement.executeUpdate() > 0;
			}
			return rowDeleted;
		}
		
		
		private void printSQLException(SQLException ex) {
			// ex is the object of the sql exception
			for (Throwable e : ex) {
				//if the instance is of the sql exception then;
				if (e instanceof SQLException) {
					e.printStackTrace(System.err);
					//print all sql error;
					System.err.println("SQLState: " + ((SQLException) e).getSQLState());
					System.err.println("Error Code: " + ((SQLException) e).getErrorCode());
					System.err.println("Message: " + e.getMessage());
					//and then running the getcause method to get the cause which is stored in 't'
					Throwable t = ex.getCause();
					//then we run a while loop to show the cause of the exception
					while (t != null) {
						System.out.println("Cause: " + t);
						t = t.getCause();
					}
				}
			}
		}
}
