package next.xadmin.psc.dao;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import next.xadmin.psc.bean.CollectPaddy;




//1. Configuring the jdbc driver
//2. Load the driver
//3. Take the connection
//4. Write all the methods to insert, update, delete, and search the data in the database
//5. Write all these operations here
public class CollectPaddyDao {

	private String jdbcURL = "jdbc:mysql://localhost:3306/psc_web_app?allowPublicKeyRetrieval=true&useSSL=false";
	private String jdbcUsername = "root";
	private String jdbcPassword = "Ruzna_421455";
	private String jdbcDriver = "com.mysql.cj.jdbc.Driver";
	
	//the following are the CRUD queries stored inside variables
	
	private static final String INSERT_PADDY_SQL = "INSERT INTO collected_paddy" + " (farmerId, paddyId, totalWeight) VALUES " + " (?, ?, ?);";

	private static final String SELECT_PADDY_BY_ID = "select collected_paddy_Id,farmerId,paddyId,totalWeight from collected_paddy where collected_paddy_Id =?";
	private static final String SELECT_ALL_PADDY = "select * from collected_paddy";
	private static final String DELETE_PADDY_SQL = "delete from collected_paddy where collected_paddy_Id = ?;";
	private static final String UPDATE_PADDY_SQL = "update collected_paddy set farmerId = ?,paddyId= ?, totalWeight =? where collected_paddy_Id = ?";
	
	public Connection getConnection() {
		Connection connection = null;
		try {
			//loading the driver, jdbc driver is a variable assigned above
			Class.forName(jdbcDriver);
			//getting the connection using the driver manager class
			connection = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return connection;
	}
	
	//insert
	public void insertPaddy(CollectPaddy collectPaddy) throws SQLException {
		//show in the console
		System.out.println(INSERT_PADDY_SQL);
		// try-with-resource statement will auto close the connection.
		// calling the getconnection method to get the connection of the jdbc and assigning it to the connection object
		try (Connection connection = getConnection();
			//with the help of the connection object, we are creating the preparestatement inside that we have passed the insert query
			PreparedStatement preparedStatement = connection.prepareStatement(INSERT_PADDY_SQL)) {
			//after that we are calling the set string method to set the name, email, and country
			preparedStatement.setInt(1, collectPaddy.getFarmerId());
			preparedStatement.setInt(2, collectPaddy.getPaddyId());
			preparedStatement.setString(3, collectPaddy.getTotalWeight());
			System.out.println(preparedStatement);
			//finally we are calling the executeupdate method to run the query with the database to insert data
			preparedStatement.executeUpdate();
		} catch (SQLException e) {
			//we are calling a print sqlexception method to handle all the exceptions below we are writing the method
			e.printStackTrace();
		}
	}

	//update
	public boolean updatePaddy(CollectPaddy collectPaddy) throws SQLException {
		//rowUpdated variable of a boolean type 
		boolean rowUpdated;
		try (Connection connection = getConnection();
				PreparedStatement statement = connection.prepareStatement(UPDATE_PADDY_SQL);) {
			System.out.println("updated paddy details:"+statement);
			//Calling the set string to set the name, email, and country
			statement.setInt(1, collectPaddy.getFarmerId());
			statement.setInt(2, collectPaddy.getPaddyId());
			statement.setString(3, collectPaddy.getTotalWeight());
			statement.setInt(4, collectPaddy.getCollectPaddyId());
						
			//calling the executeUpdate method, here is where boolean comes
			//if its greater than 0 then only carry out the executeUpdate method
			//if its greater than 0 then rowUpdated will be true
			rowUpdated = statement.executeUpdate() > 0;
		}
		return rowUpdated;
	}
	
	//select paddy by id method
	public CollectPaddy selectPaddy(int collectPaddyId) {
		//creating a user object and assigning it null
		CollectPaddy collectPaddy = null;
		// Step 1: Establishing a Connection
		try (Connection connection = getConnection();
			// Step 2:Create a statement using connection object
			PreparedStatement preparedStatement = connection.prepareStatement(SELECT_PADDY_BY_ID);) {
			//setting the prepared method, the number '1' below is the index number of the above query (first question mark)
			preparedStatement.setInt(1, collectPaddyId);
			System.out.println(preparedStatement);
			// Step 3: Execute the query or update query
			//below the reason we are using executequery method instead of execute update method is because its going to return a result
			//storing the output of the method in the Resultset (we should import this)
			ResultSet rs = preparedStatement.executeQuery();

			// Step 4: Process the ResultSet object.
			while (rs.next()) {
				//store the results into a variable
				int farmerId = rs.getInt("farmerId");
				int paddyId = rs.getInt("paddyId");
				String totalWeight = rs.getString("totalWeight");
				//passing it to the constructor, and passing it to the UserBean class
				collectPaddy = new CollectPaddy(collectPaddyId, farmerId, paddyId, totalWeight);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return collectPaddy;
	}
	

	
}
	